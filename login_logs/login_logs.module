 <?php

/**
 * Number elements per page.
 */ 
define('PER_PAGES', 6);

/**
 * Implement hook_menu().
 */
function login_logs_menu() {
  $items = array();
  $items['login_logs'] = array(
    'title' => 'Logs',
    'page callback' => 'login_logs_get_all_stats',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer users'),
  ); 
  $items['login_logs/all'] = array(
    'title' => 'All statistics',
    'page callback' => 'login_logs_get_all_stats',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer users'),
  ); 
  $items['login_logs/average'] = array(
    'title' => 'Average statistics',
    'page callback' => 'login_logs_get_average_stats',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer users'),
  ); 
  return $items;
}

/**
* Table builder; All statistics table.
*
*/
function login_logs_get_all_stats() {
  $header = array(t('ID'), t('Name'), t('Time'));
  $rows = array();
  //Select data from 'login_logs' table with  some options.
  $rows= login_logs_select_all_data();
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'Table is empty!'));
  $output .= theme('pager'); 
  return $output;
}

/**
* Table builder; Average statistics table.
*
*/
function login_logs_get_average_stats() {  
  $header = array(t('Name'), t('Count'));
  $rows = array();
  $names = array();
  $page = array();
  $chunks  = array();
  //Select data from 'login_logs' table with some options.
  $names = login_logs_select_names();  
  //Returns an array using the values of array as keys and their frequency in array as values.
  $number_users_login = array_count_values($names);
  foreach ($number_users_login as $key => $value) {
    $rows[] = array(     
      $key,
      $value,
    ); 
    // Initialise the pager.
    $page = pager_default_initialize(count($rows), variable_get('per_page', PER_PAGES));
    // Split your list into page sized chunks.
    $chunks = array_chunk($rows, variable_get('per_page', PER_PAGES), TRUE);
  }
  //Check for the existence of data in the 'login_logs' table for correctly output.
  if (isset($key)) {
    $output = theme('table', array('header' => $header, 'rows' => $chunks[$page]));
    $output .= theme('pager'); 
  }
  else {
    $output = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'Table is empty!'));
  }    
  return $output;
}

/**
 * Implement hook_user_login().
 */
function login_logs_user_login(&$edit, $account) {
  //Selects varaibles for input in 'login_logs' table.
  $user_values = array(
    'uid' => $account->uid,
    'name' => $account->name,
    'login' => $account->login,
  );
  $add_data = db_insert('login_logs')
    ->fields($user_values)
    ->execute();
}

function login_logs_select_all_data() {
  $rows = array();
  //Select data from 'login_logs' table with  some options.
  $query = db_select('login_logs', 'l')
    ->fields('l', array('uid', 'name', 'login'))
    ->orderBy('l.myid', 'DESC')
    ->extend('PagerDefault')
    ->limit(variable_get('per_page', PER_PAGES))
    ->execute();
  // Read query and fill rows of the table.
  while ($value = $query->fetchAssoc()) {
    $rows[] = array(
      $value['uid'],
      $value['name'],
      format_date($value['login'], 'medium'),
    );
  }
  return $rows;
}

function login_logs_select_names() {
  $names = array();
  //Select data from 'login_logs' table with some options.
  $query = db_select('login_logs', 'l')
    ->fields('l', array('name'))
    ->orderBy('l.uid', 'ASC')
    ->execute();
  //Read query and fill array.
  while ($value = $query->fetchAssoc()) {     
    $names[] = $value['name'];
  }
  return $names;
}